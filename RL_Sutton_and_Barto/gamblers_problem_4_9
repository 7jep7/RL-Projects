'''
A coint shows heads with probability p_h.
A gambler starts with an initial capital c_0 (number between 1 and 100) and can bet 
any amount of his capital.

The gambler wins if the coin shows heads and loses otherwise. Winning means doubling the bet, 
losing means losing the bet.

The gambler stops when he has either lost all his money or has reached a target capital 100.

A reinforcement learning agent is to learn the optimal betting strategy for the gambler.

The states are the possible capital values from 0 to 100.
The actions are the possible bets, which can be any amount from 0 to the current capital (but 
should intelligently never be higher than what's needed to reach the target capital).
'''

import numpy as np
import matplotlib.pyplot as plt
# Parameters
p_h = 0.4  # Probability of heads
target = 100  # Target capital
theta = 1e-18  # Convergence threshold

# Initialize value function and policy
V = np.zeros(target + 1)
policy = np.zeros(target + 1)

# Value iteration
delta = 1e9  # Initialize delta to a large value
while delta >= theta:
    delta = 0
    for state in range(target-1, 0, -1):  # Iterate over states from target-1 to 0
        
        old_value = V[state]
        action_values = []
        for bet in range(1, min(state, target - state) + 1):
            win = p_h * (V[state + bet] if state + bet < target else 1)
            lose = (1 - p_h) * V[state - bet]
            action_values.append(win + lose)
        V[state] = max(action_values)
        delta = max(delta, abs(old_value - V[state]))

# Extract policy
for state in range(1, target):
    action_values = []
    for bet in range(1, min(state, target - state) + 1):
        win = p_h * (V[state + bet] if state + bet < target else 1)
        lose = (1 - p_h) * V[state - bet]
        action_values.append(win + lose)
    policy[state] = np.argmax(action_values) + 1

# Plot value estimates vs capital
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(range(target + 1), V)
plt.xlabel('Capital')
plt.ylabel('Value Estimates')
plt.title('Value Estimates vs Capital')

# Plot final policy vs capital
plt.subplot(1, 2, 2)
plt.bar(range(target + 1), policy)
plt.xlabel('Capital')
plt.ylabel('Final Policy (Stake)')
plt.title('Final Policy (Stake) vs Capital')

plt.tight_layout()
plt.show()

